//package jointest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class Join {
	public static final Log log = LogFactory.getLog(Join.class);
	public static class JoinMap2 extends Mapper<LongWritable, Text, Text, Text> {



		

		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			String line = value.toString();
			String[] fields = line.split("[|]");
			String keystr=null;
				InputSplit inputSplit = (InputSplit) context.getInputSplit();
				String filename = ((FileSplit) inputSplit).getPath().getName();
				if (filename.equals("order.txt")) { // 来自order表
					
					int row = Integer.parseInt(fields[0])/2000;
					keystr=1+"";
					context.write(new Text(keystr), new Text("ORDER"+"|" + line));
					
				} else {// 来自user表
					int col = Integer.parseInt(fields[0])/2000;
					keystr=1+"";
					context.write(new Text(keystr), new Text("USER" +"|"+ line));

				}
			

		}
	}

	public static class JoinReduce2 extends Reducer<Text, Text, Text, NullWritable> {

		public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
		ArrayList<String> o_data=new ArrayList<String>();
		ArrayList<String> u_data=new ArrayList<String>();
			for (Text str : values) {
				if(str.toString().substring(0, 5) .equals("ORDER"))
					o_data.add(str.toString());
				else
					u_data.add(str.toString());
				
			}
			int count=Join_tmp.trans_data(o_data,u_data,o_data.size(),u_data.size());
			
			//for(int i=0;i<result.length;i++)
			//{
				//if(result[i]!=null)
					context.write(new Text(count+""), null);
			//}
		}
	}

	public static void main(String[] args) throws Exception {
			log.info(new SimpleDateFormat("yyyyMMddHHmmssSSS") .format(new Date()) );
			Configuration conf = new Configuration();
			//System.out.println(new SimpleDateFormat("yyyyMMddHHmmssSSS") .format(new Date() ));
			Job job2 = new Job(conf);
			job2.setJarByClass(Join.class);
			job2.setJobName("Join");

			job2.setOutputKeyClass(Text.class);
			job2.setOutputValueClass(Text.class);

			job2.setMapperClass(JoinMap2.class);
			job2.setReducerClass(JoinReduce2.class);

			job2.setInputFormatClass(TextInputFormat.class);
			job2.setOutputFormatClass(TextOutputFormat.class);

			FileInputFormat.addInputPath(job2, new Path("hdfs://localhost:9000/tmp/order.txt"));
			FileInputFormat.addInputPath(job2, new Path("hdfs://localhost:9000/tmp/user.txt"));
			FileOutputFormat.setOutputPath(job2, new Path("hdfs://localhost:9000/tmp/result"));
			job2.waitForCompletion(true);
			log.info(new SimpleDateFormat("yyyyMMddHHmmssSSS") .format(new Date()) );
			//System.out.println(new SimpleDateFormat("yyyyMMddHHmmssSSS") .format(new Date() ));
		
	}
}
